#include <stdio.h>
#include <string.h>
//#include "encrypt/base64.h"
//#include "encrypt/aka.h"
//#include "digest.hpp"
#include "auth.hpp"

static Digest* digestMethod; 
void printBin(const char* tag, unsigned char* buf, int len)
{
    printf("%s:", tag);
    int i = 0;
    for(i = 0; i < len; i++)
    {
        printf("%02x ", (unsigned char)buf[i]);
    }
    printf("\r\n");
}

static int CharToInt(unsigned char c)
{
    if(c >= '0' && c <= '9')
    {
        return c - '0';
    }
    else if(c >= 'a' && c <= 'z')
    {
        return c - 'a' + 10;
    }
}
static char intToChar(int i)
{
    if(i <= 9)
    {
        return i + '0';
    }
    else
    {
        return i - 10 + 'a';
    }
}

int hexStrToBin(unsigned char* source, unsigned char* obj)
{
    int j = 0;
    for(int i = 0; i < strlen((char*)source); i ++)
    {
        j = i/2;
        int k = i % 2;
        obj[j] = (obj[j] << 4) | (CharToInt(source[i])) ;
    }
    return j+1;
}

void binToHex(unsigned char* source, int in_len, unsigned char* obj)
{
    int j = 0;
    for(int i =0; i < in_len; i++)
    {
        int big = source[i] >> 4;
        int small = source[i] & 0x0F;
        obj[j] = intToChar(big);
        obj[j+1] = intToChar(small);
        j+=2;
    }
    obj[j+1] = '\0';
}

int calculatePw(int version, unsigned char* nonce, unsigned char* sharekey, unsigned char* pw)
{
    unsigned char nonce_decode[100] = "";
    unsigned char sharekey_bin[16] = "";
    memset(sharekey_bin, 0 , sizeof(char)*16);
    int nonce_len = base64_decode(nonce, nonce_decode);
    int len = hexStrToBin(sharekey, sharekey_bin);

    unsigned char rnd[16];
    unsigned char sqnAk[6];
    unsigned char sqn[6];
    unsigned char ak[6];
    unsigned char ik[16];
    unsigned char ck[16];
    unsigned char amf[2];
    unsigned char mac[8];
    unsigned char res[8];
    unsigned char xmac[8];

    memcpy(rnd, nonce_decode, 16);
    memcpy(sqnAk, nonce_decode+16, 6);
    memcpy(amf, nonce_decode+22, 2);
    memcpy(mac, nonce_decode+24, 8);

    f2345((unsigned char*)sharekey_bin, (unsigned char*)rnd, (unsigned char*)res, (unsigned char*)ck, (unsigned char*)ik, (unsigned char*)ak);
    printBin("sharekey_bin", (unsigned char*)sharekey_bin, 16);
    printBin("rnd", rnd, 16);
    printBin("res", res, 8);
    printBin("ik", ik, 16);
    printBin("ck", ck, 16);
    for(int i =0 ; i < 6; i++)
    {
        sqn[i] = sqnAk[i] ^ ak[i];
    }
    f1((unsigned char*)sharekey_bin, (unsigned char*)rnd, (unsigned char*)sqn, (unsigned char*)amf, (unsigned char*)xmac);
    printBin("xmac", xmac, 8);
    printBin("mac", mac, 8);

    unsigned char resIkCk[40];
    memcpy(resIkCk, res, 8);
    memcpy(resIkCk+8, ik, 16);
    memcpy(resIkCk+24, ck, 16);
    printBin("res+ik+ck", resIkCk, 40);
    unsigned char data[] = "http-digest-akav2-password";
    unsigned char digest[16];
    unsigned char hexResIkCk[100];
    binToHex(resIkCk, 40, hexResIkCk);
    printf("squall %s\r\n", hexResIkCk);
    digestMethod->Hmac(data, (int)strlen((const char*)data), resIkCk, (int)40, digest);
    //hmac_md5_digest( resIkCk, 40, data, strlen((const char*)data), digest);
    printBin("digest", digest, 16);
    unsigned char digest_base64[30];
    base64_encode(digest, 16, digest_base64);
    printf("%s\r\n", digest_base64);
    if(version == 1)
    {
        memcpy(pw, res, 8);
        return 8;
    }
    else
    {
        memcpy(pw, digest_base64, strlen((char*)digest_base64));
        return strlen((char*)digest_base64);
    }
}

int calculateResp(unsigned char* pw, int pwLen)
{
    /************input************/
    unsigned char usr_name[] = "13288615556";
    unsigned char realm[] = "qd.lucentlab.com";
    unsigned char method[] = "REGISTER";
    unsigned char uri[] = "sip:135.252.37.124";
    unsigned char nc[] = "00000001";
    unsigned char cnonce[] = "26c-6b88-3b19438";
    unsigned char qop[] = "auth";
    unsigned char nonce[]= "DCwjTAwsI0wMLCNMDCwjTA197pxU6rm5y+6F0vWNaGI=";
    /************input************/

    unsigned char ha1[16];
    digestMethod->Init();
    digestMethod->Update(usr_name, strlen((char*)usr_name));
    digestMethod->Update((unsigned char*)":", 1);
    digestMethod->Update(realm, strlen((char*)realm));
    digestMethod->Update((unsigned char*)":", 1);
    digestMethod->Update(pw, pwLen);
    digestMethod->Final(ha1);
    printBin("ha1", ha1, 16);
    unsigned char hexHa1[33];
    binToHex(ha1, 16, hexHa1);
    printf("%s\r\n", hexHa1);

    unsigned char ha2[16];
    digestMethod->Init();
    digestMethod->Update(method, strlen((char*)method));
    digestMethod->Update((unsigned char*)":", 1);
    digestMethod->Update(uri, strlen((char*)uri));
    digestMethod->Final(ha2);
    printBin("ha2", ha2, 16);
    unsigned char hexHa2[33];
    binToHex(ha2, 16, hexHa2);
    printf("%s\r\n", hexHa2);

    unsigned char response_bin[16];
    digestMethod->Init();
    digestMethod->Update(hexHa1, 32);
    digestMethod->Update((unsigned char*)":", 1);
    digestMethod->Update(nonce, strlen((char*)nonce));
    digestMethod->Update((unsigned char*)":", 1);
    digestMethod->Update(nc, strlen((char*)nc));
    digestMethod->Update((unsigned char*)":", 1);
    digestMethod->Update(cnonce, strlen((char*)cnonce));
    digestMethod->Update((unsigned char*)":", 1);
    digestMethod->Update(qop, strlen((char*)qop));
    digestMethod->Update((unsigned char*)":", 1);
    digestMethod->Update(hexHa2, 32);
    digestMethod->Final(response_bin);
    printBin("response_bin", response_bin, 16);

    return 0;
}

int main_()
{
    digestMethod = new MD5_Digest();
    unsigned char nonce[]= "DCwjTAwsI0wMLCNMDCwjTA197pxU6rm5y+6F0vWNaGI=";
    unsigned char sharekey[] = "465b5ce8b199b49faa5f0a2ee238a6bc";
    unsigned char pw[100];
    int pwLen = calculatePw(2, nonce, sharekey, pw);
    pw[pwLen] = '\0';
    printf("%s\r\n", pw);
    calculateResp(pw, pwLen);

    return 0;
}

int main()
{
    unsigned char usr_name[] = "13288615556";
    unsigned char realm[] = "qd.lucentlab.com";
    unsigned char method[] = "REGISTER";
    unsigned char uri[] = "sip:135.252.37.124";
    unsigned char nc[] = "00000001";
    unsigned char cnonce[] = "26c-6b88-3b19438";
    unsigned char qop[] = "auth";
    unsigned char nonce[]= "DCwjTAwsI0wMLCNMDCwjTA197pxU6rm5y+6F0vWNaGI=";
    unsigned char sharekey[] = "465b5ce8b199b49faa5f0a2ee238a6bc";

    Auth* authtication = new Auth((unsigned char*)"akav2-md5");
    authtication->setUsrName((unsigned char*)"13288615556");
    authtication->setRealm((unsigned char*)"qd.lucentlab.com");
    authtication->setMethod((unsigned char*)"REGISTER");
    authtication->setUri((unsigned char*)"sip:135.252.37.124");
    authtication->setNc((unsigned char*)"00000001");
    authtication->setCnonce((unsigned char*)"26c-6b88-3b19438");
    authtication->setQop((unsigned char*)"auth");
    authtication->setNonce((unsigned char*)"DCwjTAwsI0wMLCNMDCwjTA197pxU6rm5y+6F0vWNaGI=");
    authtication->setSharedKey_hex((unsigned char*)"465b5ce8b199b49faa5f0a2ee238a6bc");
    unsigned char res[100];
    authtication->calculateRespBin(res);
    
}


